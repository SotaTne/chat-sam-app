# yaml-language-server: $schema=https://raw.githubusercontent.com/aws/serverless-application-model/main/samtranslator/schema/schema.json

AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Chat SAM app stack — メッセージ閲覧/投稿、セッション管理、定期 Bot 生成 を仕様どおり実装

Globals:
  Function:
    Timeout: 3 # 秒
    MemorySize: 256 # MB
    Environment:
      Variables:
        MESSAGE_TABLE: !Ref MessageTable
        MESSAGE_COUNTER_TABLE: !Ref MessageCounterTable
        SESSION_TABLE: !Ref SessionTable
        COUNTER_RANGE_TABLE: !Ref CounterRangeTable
        DUMMY_VALUE: "ALL"
        CREATED_AT_GSI: CreatedAtIndex

Resources:
  # ------------------------
  # Cognito User Pool & Client
  # ------------------------
  ChatUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ChatUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  ChatUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ChatUserPoolClient
      UserPoolId: !Ref ChatUserPool
      GenerateSecret: false
      # ExplicitAuthFlows:
      #   - ADMIN_NO_SRP_AUTH
      #   - USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - "https://oauth.pstmn.io/v1/callback" # 処理が終わったあとに情報を持ってPostmanに戻るためのURL
      SupportedIdentityProviders:
        - "COGNITO" # IDプロバイダを指定
      AllowedOAuthFlows:
        - "code" # どのOAuthFlowを指定
      AllowedOAuthScopes:
        - "openid"

  ChatUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${AWS::StackName}-chat-domain"
      UserPoolId: !Ref ChatUserPool

  # ------------------------
  # API
  # ------------------------
  ChatApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: ChatAuthorizer
        Authorizers:
          ChatAuthorizer:
            UserPoolArn: !GetAtt ChatUserPool.Arn
            Identity:
              Header: Authorization

  # ------------------------
  # Chat Lambda
  # ------------------------
  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/chat-function
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessageTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionTable
        - DynamoDBReadPolicy:
            TableName: !Ref CounterRangeTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MessageCounterTable
      Events:
        GetMessages:
          Type: Api
          Properties:
            Path: /messages
            Method: GET
            RestApiId: !Ref ChatApi
        PostMessage:
          Type: Api
          Properties:
            Path: /messages
            Method: POST
            RestApiId: !Ref ChatApi
        GetLatestMessages:
          Type: Api
          Properties:
            Path: /messages/latest
            Method: GET
            RestApiId: !Ref ChatApi
        StaticIndex:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref ChatApi
        GetAdminInfo:
          Type: Api
          Properties:
            Path: /admin-info
            Method: GET
            RestApiId: !Ref ChatApi

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts

  ChatFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ChatFunction}"
      RetentionInDays: 3

  # ------------------------
  # Session Table
  # ------------------------
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SessionTable
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ExpirationDate
        Enabled: true

  # ------------------------
  # Message Table
  # ------------------------
  MessageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessageTable
      AttributeDefinitions:
        - AttributeName: MessageNo
          AttributeType: N
        - AttributeName: CreatedAt
          AttributeType: N
        - AttributeName: Dummy
          AttributeType: S
      KeySchema:
        - AttributeName: Dummy
          KeyType: HASH
        - AttributeName: MessageNo
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: Dummy
              KeyType: HASH
            - AttributeName: CreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # ------------------------
  # Message Counter Table
  # ------------------------
  MessageCounterTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessageCounterTable
      AttributeDefinitions:
        - AttributeName: CounterId
          AttributeType: S
      KeySchema:
        - AttributeName: CounterId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # ------------------------
  # CounterRangeTable
  # ------------------------
  CounterRangeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CounterRangeTable
      AttributeDefinitions:
        - AttributeName: RecordId
          AttributeType: S
      KeySchema:
        - AttributeName: RecordId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: CreatedAt
        Enabled: true

  # ------------------------
  # Counter Lambda
  # ------------------------
  CollectFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/counter-function
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessageTable
        - DynamoDBReadPolicy:
            TableName: !Ref CounterRangeTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
          - app.ts

  # ------------------------
  # Hourly StateMachine
  # ------------------------
  CountHourMessage:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/generate.asl.json
      DefinitionSubstitutions:
        CollectFuncArn: !GetAtt CollectFunc.Arn
      Events:
        HourlyTradingSchedule:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: rate(6 hour)
            FlexibleTimeWindow:
              Mode: FLEXIBLE
              MaximumWindowInMinutes: 5
            ScheduleExpressionTimezone: Asia/Tokyo
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CollectFunc

Outputs:
  MessageTableName:
    Value: !Ref MessageTable
  CounterRangeTableName:
    Value: !Ref CounterRangeTable
  StateMachineArn:
    Value: !Ref CountHourMessage
  ChatApiUrl:
    Description: "Base URL for the Chat API"
    Value: !Sub "https://${ChatApi}.execute-api.${AWS::Region}.amazonaws.com/${ChatApi.Stage}"
